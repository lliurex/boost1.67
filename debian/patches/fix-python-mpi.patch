From: Dimitri John Ledkov <xnox@ubuntu.com>
Date: Thu, 3 May 2018 15:54:51 +0200
Subject: Fix build of Python MPI

See https://svn.boost.org/trac10/ticket/13560 and
https://github.com/boostorg/mpi/pull/58/files.

---
 libs/mpi/build/Jamfile.v2 | 38 +++++---------------------------------
 1 file changed, 5 insertions(+), 33 deletions(-)

--- a/libs/mpi/build/Jamfile.v2
+++ b/libs/mpi/build/Jamfile.v2
@@ -1,5 +1,6 @@
 # Copyright (C) 2005, 2006 The Trustees of Indiana University.
 # Copyright (C) 2005 Douglas Gregor <doug.gregor -at- gmail.com>
+# Copyright (c) 2018 Stefan Seefeld
 
 # Use, modification and distribution is subject to the Boost Software
 # License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
@@ -11,8 +12,67 @@
 import mpi ;
 import indirect ;
 import python ;
+import option ;
+import regex ;
+
+#
+# The `version-suffix` rule really belongs into python.jam, and
+# should be moved there. `split-version` is only duplicated here
+# as a prerequisite. (See https://github.com/boostorg/build/pull/290)
+#
+
+
+# Validate the version string and extract the major/minor part we care about.
+#
+local rule split-version ( version )
+{
+    local major-minor = [ MATCH "^([0-9]+)\.([0-9]+)(.*)$" : $(version) : 1 2 3 ] ;
+    if ! $(major-minor[2]) || $(major-minor[3])
+    {
+        ECHO "Warning: \"using python\" expects a two part (major, minor) version number; got" $(version) instead ;
+
+        # Add a zero to account for the missing digit if necessary.
+        major-minor += 0 ;
+    }
+
+    return $(major-minor[1]) $(major-minor[2]) ;
+}
+
+# Define a version suffix for libraries depending on Python.
+# For example, Boost.Python built for Python 2.7 uses the suffix "27"
+rule version-suffix ( version )
+{
+    local major-minor = [ split-version $(version) ] ;
+    local suffix = $(major-minor:J="") ;
+    return $(suffix) ;
+}
+
+
+# Python build id (for Python libraries only).
+python-id = [ option.get "python-buildid" ] ;
+if $(python-id)
+{
+    PYTHON_ID = [ regex.replace $(python-id) "[*\\/:.\"\']" _ ] ;
+}
+
+rule python-tag ( name : type ? : property-set )
+{
+    local result = $(name) ;
+    if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB
+    {
+        local version = [ $(property-set).get <python> ] ;
+        local lib-suffix = [ version-suffix $(version) ] ;
+        result = $(result)$(lib-suffix) ;
+    }
+    if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB && $(PYTHON_ID)
+    {
+        result = $(result)-$(PYTHON_ID) ;
+    }
+
+    # forward to the boost tagging rule
+    return  [ tag $(result) : $(type) : $(property-set) ] ;
+}
 
-libraries = ;
 
 if [ mpi.configured ]
 {
@@ -56,45 +116,24 @@
     <library>/mpi//mpi [ mpi.extra-requirements ]
   ;
 
-libraries += boost_mpi ;
-
   if [ python.configured ]
   {
-    py2-version = [ py-version 2 ] ;
-    py3-version = [ py-version 3 ] ;
-
-    # These library names are synchronized with those defined by Boost.Python, see libs/python/build/Jamfile.
-    lib_boost_python(2) = boost_python ;
-    lib_boost_python(3) = boost_python3 ;
-
-    lib_boost_python($(py2-version)) = $(lib_boost_python(2)) ;
-    lib_boost_python($(py3-version)) = $(lib_boost_python(3)) ;
-
-    lib_boost_mpi_python(2) = boost_mpi_python ;
-    lib_boost_mpi_python(3) = boost_mpi_python3 ;
-
-    lib_boost_mpi_python($(py2-version)) = $(lib_boost_mpi_python(2)) ;
-    lib_boost_mpi_python($(py3-version)) = $(lib_boost_mpi_python(3)) ;
-
-    for local N in 2 3
-    {
-        if $(py$(N)-version)
-        {
-            lib $(lib_boost_mpi_python($(py$(N)-version)))
+            lib boost_mpi_python
               : # Sources
                 python/serialize.cpp
               : # Requirements
                 <library>boost_mpi
                 <library>/mpi//mpi [ mpi.extra-requirements ]
-                <library>/boost/python//$(lib_boost_python($(py$(N)-version)))
+                <library>/boost/python//boost_python
                 <link>shared:<define>BOOST_MPI_DYN_LINK=1
                 <link>shared:<define>BOOST_MPI_PYTHON_DYN_LINK=1
                 <link>shared:<define>BOOST_PYTHON_DYN_LINK=1
                 <define>BOOST_MPI_PYTHON_SOURCE=1
-                -<tag>@$(BOOST_JAMROOT_MODULE)%$(BOOST_JAMROOT_MODULE).tag
-                <tag>@$(BOOST_JAMROOT_MODULE)%$(BOOST_JAMROOT_MODULE).python-tag
                 <python-debugging>on:<define>BOOST_DEBUG_PYTHON
-                <python>$(py$(N)-version)
+                -<tag>@$(BOOST_JAMROOT_MODULE)%$(BOOST_JAMROOT_MODULE).tag
+                <tag>@$(__name__).python-tag
+                <conditional>@python.require-py
+
               : # Default build
                 <link>shared
               : # Usage requirements
@@ -116,8 +155,8 @@
                 python/status.cpp
                 python/py_timer.cpp
               : # Requirements
-                <library>/boost/python//$(lib_boost_python($(py$(N)-version)))
-                <library>$(lib_boost_mpi_python($(py$(N)-version)))
+                <library>/boost/python//boost_python
+                <library>boost_mpi_python
                 <library>boost_mpi
                 <library>/mpi//mpi [ mpi.extra-requirements ]
                 <link>shared:<define>BOOST_MPI_DYN_LINK=1
@@ -125,16 +164,7 @@
                 <link>shared:<define>BOOST_PYTHON_DYN_LINK=1
                 <link>shared <runtime-link>shared
                 <python-debugging>on:<define>BOOST_DEBUG_PYTHON
-                <python>$(py$(N)-version)
               ;
-
-            libraries += $(lib_boost_mpi_python($(py$(N)-version))) ;
-        }
-        else
-        {
-            alias $(lib_boost_mpi_python($(N))) ;
-        }
-    }
   }
 }
 else if ! ( --without-mpi in  [ modules.peek : ARGV ] )
@@ -146,6 +176,3 @@
       : "note: otherwise, you can safely ignore this message." 
       ;
 }
-
-boost-install $(libraries) ;
-
