From: Frédéric Bonnard <frediz@debian.org>
Subject: Fix FTBFS on ppc64*

With powerpc target and uClibc toolchain the spirit library doesn't
build properly due to an invalid field access.

The "bits" field is intended only for internal use in
include/boost/math/special_functions/sign.hpp not from
include/boost/spirit/home/support/detail/sign.hpp.

This lead to the following build failure:

In file included from ./boost/spirit/home/qi/numeric/detail/real_impl.hpp:22:0,
                 from ./boost/spirit/home/qi/numeric/real.hpp:21,
                 from ./boost/spirit/home/qi/numeric.hpp:17,
                 from ./boost/spirit/include/qi_core.hpp:23,
                 from libs/log/src/default_filter_factory.cpp:21:
./boost/spirit/home/support/detail/sign.hpp: In instantiation of 'T boost::spirit::detail::changesign(T) [with T = long double]':
./boost/spirit/home/qi/numeric/detail/real_impl.hpp:94:50:   required from here
./boost/spirit/home/support/detail/sign.hpp:60:36: error:
no type named 'bits' in 'traits_type {aka struct boost::math::detail::fp_traits_non_native<long double, boost::math::detail::extended_double_precision>}'
         typename traits_type::bits a;

Simply call (boost::math::changesign)(x) from include/boost/spirit/home/support/detail/sign.hpp
to fixes this.

Signed-off-by: Romain Naour <romain.naour@openwide.fr>
---
diff --git a/boost/spirit/home/support/detail/sign.hpp b/boost/spirit/home/support/detail/sign.hpp
index 7c1bfb0..a5fc7e1 100644
--- a/libs/spirit/include/boost/spirit/home/support/detail/sign.hpp
+++ b/libs/spirit/include/boost/spirit/home/support/detail/sign.hpp
@@ -15,7 +15,7 @@
 
 #include <boost/config/no_tr1/cmath.hpp>
 #include <boost/version.hpp>
-#if BOOST_VERSION < 104000 
+#if BOOST_VERSION < 104000
 #include <boost/spirit/home/support/detail/math/fpclassify.hpp>
 #include <boost/spirit/home/support/detail/math/signbit.hpp>
 #else
@@ -55,13 +55,7 @@ namespace boost { namespace spirit { namespace detail
 #if defined(BOOST_MATH_USE_STD_FPCLASSIFY) && !defined(BOOST_MATH_DISABLE_STD_FPCLASSIFY)
         return -x;
 #else
-        typedef typename math::detail::fp_traits<T>::type traits_type;
-
-        typename traits_type::bits a;
-        traits_type::get_bits(x, a);
-        a ^= traits_type::sign;
-        traits_type::set_bits(x, a);
-        return x;
+        return (boost::math::changesign)(x);
 #endif
     }
 #endif
